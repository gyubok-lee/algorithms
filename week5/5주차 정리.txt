1 : 쿼리로 조건에 맞는 경우의 수 세기
풀이
1) 모든 경우의 수에 대하여 사전[경우의수] = [점수들..] 의 형태로 자료를 저장.
2) value값을 정렬하여 이분탐색으로 빠르게 조건에 맞는 점수들의 갯수를 카운팅.

2. 이분탐색, ,lower bound 알고리즘 정리

3. 최단거리 알고리즘 : 다익스트라
- heapq라는 모듈을 활용하면 더 빠름.

4. 택시동승 : 다익스트라 활용
풀이
1) 모든 노드를 경유지로 설정하고, 그 경유지에서 도착지까지 각각 다익스트라로 비용 측정.
2) 이것도 우선순위큐를 활용하면 더 빠르다고 함.

5. 동시 시청자 수 : 시간데이터 + 동적계획법
풀이
1) 우선 시간을 배열 형태로 셋팅하고 각 시청시간의 시작시간과 끝을 마킹
2) 처음부터 끝까지 누적합 -> 그 시간대의 시청자수를 알 수 있음.
3) 다시 누적합 -> 해당 "시간"의 가중치를 알 수 있음.
4) 가장 가중치가 높은 시간에서 광고시간을 뺀 시간이 답.

6. 카드 뒤집기 : 시뮬레이션(브루트포스 + bfs + 백트레킹 + 동적계획법)
풀이
1) 어떤 순서로 카드를 뒤집을 것인가(카드 종류에 대해)
2) 두 장 중 어떤 것부터 뒤집을 것인가(각각에 대해)
3) 최소이동거리는 얼마인가(동적계획법과 bfs를 통해)

브루트포스 -> 백트레킹 -> bfs -> 동적계획법. 알고리즘의 복합적인 활용이 중요

------------------------------------------------------------------------------

문제풀이의 설계를 한뒤, 각 부분에 대해 함수를 짜서 결합시키는 사고력이 더 필요.
좀더 문제를 세분화하고 차근하게 생각하면 됨. 효율성은 일단 나중에 생각할것.
